name: Prepare deployment to Google App Engine

on:
  pull_request:
    branches: [release]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test:
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out the repository under $GITHUB_WORKSPACE, so this job can access it
      - uses: actions/checkout@v2

      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - name: Install Poetry
        uses: dschep/install-poetry-action@v1.3

      - name: Cache all dependencies in virtualenvs
        id: cache-libs-all
        uses: actions/cache@v2
        with:
          path: ~/.virtualenvs
          key: python-libs-${{ hashFiles('**/poetry.lock') }}
          restore-keys: python-libs-

      - name: Set Poetry config
        run: |
          poetry config virtualenvs.in-project false
          poetry config virtualenvs.path ~/.virtualenvs

      # - name: Do we have a cache-hit for all dependencies?
      #   run: echo "Hell yeah!  They won't be installed again."
      #   if: steps.cache-libs-all.outputs.cache-hit == 'true'

      - name: Install all dependencies
        run: poetry install -v --no-interaction --no-ansi

        # if: steps.cache-libs-all.outputs.cache-hit != 'true'
      - name: Code Quality
        run: poetry run black . --check

      - name: Test with pytest
        run: poetry run pytest --cov . -n 2

      - name: Install production dependencies
        run: poetry install -v --no-interaction --no-ansi --no-dev

      - name: Create requirements.txt (cuz that's what GAE relies on ðŸ˜’)
        run: poetry run pip freeze > requirements.txt

      - name: Push to built branch
        uses: Automattic/action-commit-to-branch@master
        with:
          branch: "develop"
          commit_message: "generate requirements.txt"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
